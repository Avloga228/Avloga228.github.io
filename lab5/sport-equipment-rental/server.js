import express from 'express';
import cors from 'cors';
import admin from 'firebase-admin';
import path from 'path';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
dotenv.config();

// –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ –¥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase
let firebaseInitialized = false;

try {
  // 1. –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–æ –∑ JSON-—Ñ–∞–π–ª—É
  const serviceAccountPath = path.join(__dirname, 'firebase-service-account.json');
  if (fs.existsSync(serviceAccountPath)) {
    console.log('üî• Initializing Firebase with service account JSON file');
    const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf8'));
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
    firebaseInitialized = true;
  }
} catch (error) {
  console.error('Error initializing Firebase from file:', error);
}

// 2. –Ø–∫—â–æ –ø–µ—Ä—à–∏–π –º–µ—Ç–æ–¥ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —Å–ø—Ä–æ–±—É—î–º–æ –∑ ENV –∑–º—ñ–Ω–Ω–∏—Ö
if (!firebaseInitialized && process.env.FIREBASE_PROJECT_ID && process.env.FIREBASE_CLIENT_EMAIL && process.env.FIREBASE_PRIVATE_KEY) {
  try {
    console.log('üî• Initializing Firebase with environment variables');
    
    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    let privateKey = process.env.FIREBASE_PRIVATE_KEY;
    
    // –Ø–∫—â–æ –∫–ª—é—á –∑ —Ä—è–¥–∫–æ–≤–∏–º–∏ "\n", –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ó—Ö –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n');
    }
    
    // –Ø–∫—â–æ –∫–ª—é—á —É –ª–∞–ø–∫–∞—Ö, –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö
    if (privateKey.startsWith('"') && privateKey.endsWith('"')) {
      privateKey = privateKey.slice(1, -1);
    }
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—ñ–Ω –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    if (!privateKey.startsWith('-----BEGIN PRIVATE KEY-----')) {
      console.log('–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç');
      console.log('–ü–µ—Ä—à—ñ 20 —Å–∏–º–≤–æ–ª—ñ–≤ –∫–ª—é—á–∞:', privateKey.substring(0, 20));
    }
    
    const serviceAccount = {
      "type": "service_account",
      "project_id": process.env.FIREBASE_PROJECT_ID,
      "private_key": privateKey,
      "client_email": process.env.FIREBASE_CLIENT_EMAIL,
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "universe_domain": "googleapis.com"
    };
    
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
    
    firebaseInitialized = true;
  } catch (error) {
    console.error('Error initializing Firebase from ENV:', error);
  }
}

// 3. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, —Å–ø—Ä–æ–±—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ –±–µ–∑ —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
if (!firebaseInitialized) {
  try {
    console.log('üî• Trying to initialize Firebase with application default credentials');
    
    // –°–ø—Ä–æ—â–µ–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–µ–∑ —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
    admin.initializeApp({
      projectId: process.env.FIREBASE_PROJECT_ID || 'sportrent-ba741'
    });
    
    firebaseInitialized = true;
  } catch (error) {
    console.error('Error initializing Firebase with default credentials:', error);
  }
}

// –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫—É
if (!firebaseInitialized) {
  console.error('‚ùå Firebase initialization failed with all methods. Check credentials and try again.');
  console.log('Continuing without Firebase, some features will not work!');
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Firestore, —è–∫—â–æ Firebase –∑–∞–ø—É—Å—Ç–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ
const db = firebaseInitialized ? admin.firestore() : null;

const app = express();
const PORT = process.env.PORT || 3000;

// –†–æ–∑—à–∏—Ä–µ–Ω—ñ CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const corsOptions = {
  origin: '*', // –¢–∏–º—á–∞—Å–æ–≤–æ –¥–æ–∑–≤–æ–ª—è—é –≤—Å—ñ –¥–æ–º–µ–Ω–∏ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Client-Source'],
  credentials: true
};

// Middleware
app.use(cors(corsOptions));
app.use(express.json());
app.use(express.static(path.join(__dirname, 'dist')));

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url} –≤—ñ–¥ ${req.headers.origin || '–Ω–µ–≤—ñ–¥–æ–º–æ'}`);
  next();
});

// –¢–µ—Å—Ç–æ–≤–∏–π GET-–º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/test', (req, res) => {
    res.json({ 
      status: 'OK',
      message: '–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!',
      timestamp: new Date().toISOString() 
    });
  });
  
// –¢–µ—Å—Ç–æ–≤–∏–π POST-–º–∞—Ä—à—Ä—É—Ç
app.post('/test', (req, res) => {
const { data } = req.body;
res.json({ 
    status: 'OK',
    receivedData: data || '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É —Ç—ñ–ª—ñ –∑–∞–ø–∏—Ç—É',
    method: 'POST'
});
});

// –°—Ç–∞—Ç–∏—á–Ω–∏–π HTML-–≤—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
app.get('/test-page', (req, res) => {
res.send(`
    <html>
    <body>
        <h1>–¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞</h1>
        <p>–°–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª—è—î GET-–∑–∞–ø–∏—Ç–∏!</p>
    </body>
    </html>
`);
});

const authenticate = async (req, res, next) => {
    const idToken = req.headers.authorization?.split('Bearer ')[1];
    
    if (!idToken) {
      return res.status(401).json({ error: 'Unauthorized: No token provided' });
    }
  
    try {
      const decodedToken = await admin.auth().verifyIdToken(idToken);
      req.user = decodedToken; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–ø–∏—Ç—ñ
      next();
    } catch (error) {
      res.status(403).json({ error: 'Unauthorized: Invalid token' });
    }
  };

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –∑–∞ —Ü—ñ–Ω–æ—é
app.get('/api/rentals', async (req, res) => {
  try {
    console.log('GET /api/rentals, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:', req.query);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
    if (!firebaseInitialized || !db) {
      console.error('Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.');
      return res.status(503).json({ 
        error: 'Database unavailable', 
        message: '–°–µ—Ä–≤—ñ—Å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.' 
      });
    }
    
    const userId = req.query.userId;
    const minPrice = parseInt(req.query.minPrice) || 0;
    const maxPrice = parseInt(req.query.maxPrice) || Infinity;

    if (!userId) {
      console.log('GET /api/rentals - –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ userId');
      return res.status(400).json({ error: 'User ID is required' });
    }

    console.log(`GET /api/rentals - –ü–æ—à—É–∫ –æ—Ä–µ–Ω–¥ –¥–ª—è userId: ${userId}, —Ü—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: ${minPrice}-${maxPrice}`);

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase
    try {
      const rentalsRef = db.collection('rentals');
      const query = rentalsRef.where('userId', '==', userId);
      console.log('–í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Firebase...');
      const snapshot = await query.get();
      console.log(`Firebase –ø–æ–≤–µ—Ä–Ω—É–≤ ${snapshot.size} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`);

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ —Ü—ñ–Ω–æ—é
      const rentals = [];
      snapshot.forEach(doc => {
        const rental = { id: doc.id, ...doc.data() };
        if (rental.price >= minPrice && rental.price <= maxPrice) {
          rentals.push(rental);
        }
      });

      console.log(`–ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —Ü—ñ–Ω–æ—é –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${rentals.length} –æ—Ä–µ–Ω–¥`);
      res.json(rentals);
    } catch (firestoreError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Firestore:', firestoreError);
      return res.status(500).json({ error: 'Database access error', details: firestoreError.message });
    }
  } catch (error) {
    console.error('–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—Ä–µ–Ω–¥:', error);
    res.status(500).json({ error: 'Failed to fetch rentals', details: error.message });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ—Ä–µ–Ω–¥—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
app.post('/api/rentals', async (req, res) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
    if (!firebaseInitialized || !db) {
      console.error('Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ –º–æ–∂–µ–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ.');
      return res.status(503).json({ 
        error: 'Database unavailable', 
        message: '–°–µ—Ä–≤—ñ—Å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.' 
      });
    }
    
    const { userId, equipmentId, name, price, date, status, image, sportType } = req.body;

    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", {
      userId, 
      equipmentId, 
      name, 
      price, 
      "equipmentId type": typeof equipmentId,
      "equipmentId value": equipmentId
    });

    if (!userId || !equipmentId || !name || !price) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ equipmentId —î –¥—ñ–π—Å–Ω–∏–º
    if (typeof equipmentId !== 'string' || !equipmentId.trim()) {
      return res.status(400).json({ error: 'Invalid equipment ID' });
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ Firebase - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const rentalData = {
      userId,
      equipmentId,
      name,
      price,
      date: date || new Date().toISOString(),
      status: status || '–æ—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
      image,
      sportType
    };
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ add() –∑–∞–º—ñ—Å—Ç—å doc().set() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è ID
    const rentalRef = await db.collection('rentals').add(rentalData);

    // –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –±–µ–∑ doc() –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ
    await db.runTransaction(async (transaction) => {
      // –ü–µ—Ä–µ–∫–æ–Ω–∞–π–º–æ—Å—è, —â–æ equipmentId - —Ü–µ —Ä—è–¥–æ–∫ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤
      const safeEquipmentId = String(equipmentId).trim();
      console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é ID –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:", safeEquipmentId);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —É –∫–æ–ª–µ–∫—Ü—ñ—ó —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
      const inventoryCollection = db.collection('inventory');
      const docRef = inventoryCollection.doc(safeEquipmentId);
      const inventoryDoc = await transaction.get(docRef);
      
      if (!inventoryDoc.exists) {
        throw new Error(`Equipment not found with ID: ${safeEquipmentId}`);
      }
      
      const currentQuantity = inventoryDoc.data().quantity;
      if (currentQuantity < 1) {
        throw new Error('Equipment out of stock');
      }
      
      transaction.update(docRef, { quantity: currentQuantity - 1 });
    });

    res.status(201).json({ 
      id: rentalRef.id, 
      message: 'Rental created successfully' 
    });
  } catch (error) {
    console.error('Error creating rental:', error);
    res.status(500).json({ error: `Failed to create rental: ${error.message}` });
  }
});

// –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ CORS
app.get('/api/cors-test', (req, res) => {
  // –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø–∏—Ç—É –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
  console.log('CORS Test Headers:', req.headers);
  
  res.json({
    success: true,
    message: 'CORS –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
    client: req.headers.origin || '–Ω–µ–≤—ñ–¥–æ–º–∏–π',
    timestamp: new Date().toISOString(),
    headers: req.headers
  });
});

// –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—î–¥–Ω–∞–Ω–Ω—è –∑ Firebase
app.get('/api/firebase-test', async (req, res) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
    if (!firebaseInitialized || !db) {
      return res.status(503).json({
        success: false,
        message: 'Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ',
        initialized: firebaseInitialized,
        dbAvailable: !!db,
        timestamp: new Date().toISOString()
      });
    }
    
    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑ Firebase
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .limit(1) –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const testQuery = db.collection('inventory').limit(1);
    console.log('–¢–µ—Å—Ç—É—î–º–æ –∑—î–¥–Ω–∞–Ω–Ω—è –∑ Firestore...');
    
    const snapshot = await testQuery.get();
    const testDoc = snapshot.empty ? null : snapshot.docs[0].data();
    
    res.json({
      success: true,
      message: '–ó—î–¥–Ω–∞–Ω–Ω—è –∑ Firebase —É—Å–ø—ñ—à–Ω–µ',
      data: testDoc ? '–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç' : '–¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
      docCount: snapshot.size,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑—î–¥–Ω–∞–Ω–Ω—è –∑ Firebase:', error);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –∑—î–¥–Ω–∞–Ω–Ω—è –∑ Firebase',
      error: error.message,
      stack: error.stack,
      code: error.code,
      details: error.details,
      timestamp: new Date().toISOString()
    });
  }
});

// –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ React –¥–æ–¥–∞—Ç–æ–∫
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});